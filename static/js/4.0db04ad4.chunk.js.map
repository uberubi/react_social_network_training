{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog","active","to","name","Message","s","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","styles","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCajKC,EAVI,SAAAC,GACjB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QACzC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCEjBC,EALC,SAAAT,GACd,OAAO,yBAAKG,UAAWO,IAAEL,QAASL,EAAMW,U,yCCDpCC,EAAcC,YAAiB,IAkBtBC,EAFaC,YAAU,CAAEC,KAAM,wBAAlBD,EAdL,SAACf,GACtB,OACE,0BAAMiB,SAAUjB,EAAMkB,cACpB,6BACE,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAAiBc,YAAY,qBACvDC,SAAU,CAACC,IAAUZ,MAE9B,6BACE,6CCcOa,EAtBC,SAACzB,GAEf,IAAI0B,EAAQ1B,EAAM2B,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAMwB,IAAKD,EAAE7B,GAAIA,GAAI6B,EAAE7B,QACtF+B,EAAmBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAEjC,QAKrF,OAAKF,EAAMoC,OAGT,yBAAKjC,UAAWkC,IAAOR,SACrB,yBAAK1B,UAAWkC,IAAOC,cAAeV,GACtC,yBAAKzB,UAAWkC,IAAOH,UACrB,6BAAMD,IAER,kBAAC,EAAD,CAAqBhB,SAZL,SAACsB,GACnBvC,EAAMwC,YAAYD,EAAOE,oBAGD,kBAAC,IAAD,CAAUlC,GAAI,Y,gDCZtCmC,EAA6B,SAAAhB,GAAK,MAAK,CACzCU,OAAQV,EAAMiB,KAAKP,S,OCaLQ,sBACdC,aAboB,SAACnB,GAAD,MAAY,CAChCC,YAAaD,EAAMC,gBAGI,SAACmB,GACxB,MAAO,CACLN,YAAa,SAACC,GACZK,EAASC,YAAmBN,UDLF,SAAAO,GAAc,IACtCC,EADqC,iLAGvC,OAAKC,KAAKlD,MAAMoC,OAET,kBAACY,EAAcE,KAAKlD,OAFI,kBAAC,IAAD,CAAUO,GAAI,eAHN,GACX4C,IAAMH,WAUtC,OAFiCH,YAAQH,EAARG,CAAoCI,KCCvDL,CAGdnB","file":"static/js/4.0db04ad4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2iM8Y\",\"dialogItems\":\"Dialogs_dialogItems__3mlyE\",\"active\":\"Dialogs_active__1pvpN\",\"messages\":\"Dialogs_messages__2pBJz\",\"message\":\"Dialogs_message__2ba2b\"};","import React from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = props => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={style.dialog + \" \" + style.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\n\r\nconst Message = props => {\r\n  return <div className={s.dialog}>{props.message}</div>;\r\n};\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport Textarea from \"../../common/FormsControls/FormControls\";\r\nimport { required, maxLengthCreator } from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n               validate={[required, maxLength50]} />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm);\r\n\r\nexport default AddMessageFormRedux;","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddMessageFormRedux from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n  let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />);\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\r\n      <div className={styles.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit= {addNewMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsForRedirect = state => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to ='/login' />\r\n\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let connectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n  \r\n  return connectedRedirectComponent\r\n}","import { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n  dialogsPage: state.dialogsPage\r\n}) \r\n \r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody))\r\n    },\r\n  }\r\n}\r\n\r\nexport default  compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}